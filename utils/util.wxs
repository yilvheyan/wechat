var filter = {
    formatTime: function(date, format = 'Y.M.D') {
        var fa = format.split('');
        var len = fa.length;
        var chars = [],
            a1 = [],
            a2 = [];
        var b1 = '.',
            b2 = ':';
        for (var i = 0; i < len; i++) {
            switch (fa[i]) {
                case 'Y':
                    a1.push(date.getFullYear());
                    break;
                case 'M':
                    a1.push(date.getMonth() + 1);
                    break;
                case 'D':
                    a1.push(date.getDate());
                    break;
                case 'h':
                    a2.push(date.getHours());
                    break;
                case 'm':
                    a2.push(date.getMinutes());
                    break;
                case 's':
                    a2.push(date.getSeconds());
                    break;
                default:
                    if (chars.indexOf(fa[i]) == -1 && fa[i] != ' ') {
                        chars.push(fa[i]);
                    }
            }
        }

        if (chars.length >= 2) {
            b1 = chars[0];
            b2 = chars[1];
        } else if (chars.length == 1) {
            b1 = chars[0];
        }

        var res = '';
        if (a1.length > 1) {
            res += a1.map(filter.formatNumber).join(b1);
        } else if (a1.length == 1) {
            res += a1.map(filter.formatNumber);
        }
        if (a2.length > 1) {
            res += ' ' + a2.map(filter.formatNumber).join(b2);
        } else if (a2.length == 1) {
            res += a2.map(filter.formatNumber);
        }
        return res;
    },

    formatTimeByTs: function(timestamp, format = 'Y.M.D') {
        return filter.formatTime(getDate(timestamp * 1000), format);
    },

    formatNumber: function(n) {
        n = n.toString();
        return n[1] ? n : '0' + n;
    }
}
module.exports = {
    formatTimeByTs: filter.formatTimeByTs,
    formatTime: filter.formatTime,
    formatNumber: filter.formatNumber
}